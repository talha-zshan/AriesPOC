#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host codenvy/che-ip)}
set -e

S2I_EXE=s2i
if [ -z $(type -P "$S2I_EXE") ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image/releases"
  echo -e "Make sure you extract the binary and place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

      Usage: $0 [command] [options]

      Commands:

      up -  Builds the images, creates the application containers
            and starts the services based on the docker-compose.yml file.

            You can pass in a list of containers to start.
            By default all containers will be started.

            The API_URL used by tob-web can also be redirected.

            Examples:
            $0 start
            $0 start bob-agent

      start - Same as up

      restart - Re-starts the application containers,
                useful when updating one of the container images during development.

            You can pass in a list of containers to be restarted.
            By default all containers will be restarted.

            Examples:
            $0 start
            $0 start faber-agent

      logs - Display the logs from the docker compose run (ctrl-c to exit).

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.

      down - Brings down the services and removes the volumes (storage) and containers.
      rm - Same as down


EOF
  exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
 DEFAULT_CONTAINERS="nhstrust-agent nhstrust-notebook regulator-agent regulator-notebook researcher-agent researcher-notebook hospital1-agent hospital1-notebook hospital2-agent hospital2-notebook hospital3-agent hospital3-notebook"
# DEFAULT_CONTAINERS="researcher-agent researcher-notebook hospital1-agent hospital1-notebook hospital2-agent hospital2-notebook hospital3-agent hospital3-notebook"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
function echoRed() {
  _msg=${1}
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function echoYellow() {
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}"
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']/}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift

    # echo "arg: ${arg}"
    # echo "Remaining: ${@}"

    case "$arg" in
    *=*)
      # echo "Exporting ..."
      export "${arg}"
      ;;
    *)
      # echo "Saving for later ..."
      # If not recognized, save it for later procesing ...
      set -- "$@" "$arg"
      ;;
    esac
  done

  # global
  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:controller}"
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export WALLET_TYPE="indy"
  export GENESIS_URL="https://raw.githubusercontent.com/sovrin-foundation/sovrin/master/sovrin/pool_transactions_sandbox_genesis"

  # nhstrust-agent
  export NHSTRUST_AGENT_NAME="NHS Lothian"
  export NHSTRUST_ADMIN_PORT=8021
  export NHSTRUST_HTTP_PORT=8020
  export NHSTRUST_WEBHOOK_PORT=8022
  export NHSTRUST_WEBHOOK_URL=${NHSTRUST_WEBHOOK_URL:-http://$DOCKERHOST:$NHSTRUST_WEBHOOK_PORT}
  export NHSTRUST_AGENT_ENDPOINT=${NHSTRUST_AGENT_ENDPOINT:-http://$DOCKERHOST:$NHSTRUST_HTTP_PORT}
  export NHSTRUST_WALLET_SEED="nhstrust_seed_000000000000000000"
  export NHSTRUST_JUPYTER_PORT="8888"
  export NHSTRUST_WALLET_KEY="nhstrust_key_00000000000000000000000"
  export NHSTRUST_WALLET_NAME="NHS Trust Wallet"


  # regulator-agent
  export REGULATOR_AGENT_NAME="NHS Health Research Authority"
  export REGULATOR_ADMIN_PORT=8031
  export REGULATOR_HTTP_PORT=8030
  export REGULATOR_WEBHOOK_PORT=8032
  export REGULATOR_WEBHOOK_URL=${REGULATOR_WEBHOOK_URL:-http://$DOCKERHOST:$REGULATOR_WEBHOOK_PORT}
  export REGULATOR_AGENT_ENDPOINT=${REGULATOR_AGENT_ENDPOINT:-http://$DOCKERHOST:$REGULATOR_HTTP_PORT}
  export REGULATOR_WALLET_SEED="regulator_seed_00000000000000000"
  export REGULATOR_JUPYTER_PORT="8889"
  export REGULATOR_WALLET_KEY="regulator_key_00000000000000000000000"
  export REGULATOR_WALLET_NAME="NHS Health Research Authority Wallet"

    # researcher-agent
  export RESEARCHER_AGENT_NAME="Health Researcher"
  export RESEARCHER_ADMIN_PORT=8041
  export RESEARCHER_HTTP_PORT=8040
  export RESEARCHER_WEBHOOK_PORT=8042
  export RESEARCHER_WEBHOOK_URL=${RESEARCHER_WEBHOOK_URL:-http://$DOCKERHOST:$RESEARCHER_WEBHOOK_PORT}
  export RESEARCHER_AGENT_ENDPOINT=${RESEARCHER_AGENT_ENDPOINT:-http://$DOCKERHOST:$RESEARCHER_HTTP_PORT}
  export RESEARCHER_WALLET_SEED="researcher_seed_0000000000000000"
  export RESEARCHER_JUPYTER_PORT="8890"
  export RESEARCHER_WALLET_KEY="researcher_key_00000000000000000000000"
  export RESEARCHER_WALLET_NAME="Health Researcher Wallet"



    # hospital1-agent
  export HOSPITAL1_AGENT_NAME="Royal Infirmary of Edinburgh"
  export HOSPITAL1_ADMIN_PORT=8051
  export HOSPITAL1_HTTP_PORT=8050
  export HOSPITAL1_WEBHOOK_PORT=8052
  export HOSPITAL1_WEBHOOK_URL=${HOSPITAL1_WEBHOOK_URL:-http://$DOCKERHOST:$HOSPITAL1_WEBHOOK_PORT}
  export HOSPITAL1_AGENT_ENDPOINT=${HOSPITAL1_AGENT_ENDPOINT:-http://$DOCKERHOST:$HOSPITAL1_HTTP_PORT}
  export HOSPITAL1_WALLET_SEED="hospital1_seed_00000000000000000"
  export HOSPITAL1_JUPYTER_PORT="8891"
  export HOSPITAL1_WALLET_KEY="hospital1_key_00000000000000000000000"
  export HOSPITAL1_WALLET_NAME="Royal Infirmary of Edinburgh Wallet"


    # hospital2-agent
  export HOSPITAL2_AGENT_NAME="Royal Edinburgh Hospital"
  export HOSPITAL2_ADMIN_PORT=8061
  export HOSPITAL2_HTTP_PORT=8060
  export HOSPITAL2_WEBHOOK_PORT=8062
  export HOSPITAL2_WEBHOOK_URL=${HOSPITAL2_WEBHOOK_URL:-http://$DOCKERHOST:$HOSPITAL2_WEBHOOK_PORT}
  export HOSPITAL2_AGENT_ENDPOINT=${HOSPITAL2_AGENT_ENDPOINT:-http://$DOCKERHOST:$HOSPITAL2_HTTP_PORT}
  export HOSPITAL2_WALLET_SEED="hospital2_seed_00000000000000000"
  export HOSPITAL2_JUPYTER_PORT="8892"
  export HOSPITAL2_WALLET_KEY="hospital2_key_00000000000000000000000"
  export HOSPITAL2_WALLET_NAME="Royal Edinburgh Hospital Wallet"


    # hospital3-agent
  export HOSPITAL3_AGENT_NAME="St Johns Hospital"
  export HOSPITAL3_ADMIN_PORT=8071
  export HOSPITAL3_HTTP_PORT=8070
  export HOSPITAL3_WEBHOOK_PORT=8072
  export HOSPITAL3_WEBHOOK_URL=${HOSPITAL3_WEBHOOK_URL:-http://$DOCKERHOST:$HOSPITAL3_WEBHOOK_PORT}
  export HOSPITAL3_AGENT_ENDPOINT=${HOSPITAL3_AGENT_ENDPOINT:-http://$DOCKERHOST:$HOSPITAL3_HTTP_PORT}
  export HOSPITAL3_WALLET_SEED="hospital3_seed_00000000000000000"
  export HOSPITAL3_JUPYTER_PORT="8893"
  export HOSPITAL3_WALLET_KEY="hospital3_key_00000000000000000000000"
  export HOSPITAL3_WALLET_NAME="St Johns Hospital Wallet"



}

getInputParams() {
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    *)
      ARGS+=" $arg"
      ;;
    esac
  done

  echo ${ARGS}
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/tob-web/.cache
}


getSeedJson() {
  _seed=${1}
  if [ -z "${_seed}" ]; then
    echo -e \\n"getSeedJson; Missing parameter!"\\n
    exit 1
  fi

  echo "{\"seed\": \"${_seed}\"}"
}

generateSeeds() {
  echo ${INDY_WALLET_SEED}
}



toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

echoError() {
  _msg=${1}
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}${_msg}${_nc}" >&2
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}
# =================================================================================================================

pushd "${SCRIPT_HOME}" >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
start | up)
  echoYellow "Starting up... This can take a couple of minutes."
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  docker-compose\
  --log-level ERROR up \
  --build --remove-orphans \
  -d ${_startupParams}
  docker-compose \
  --log-level ERROR logs \
  -f
  ;;
restart)
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  docker-compose stop ${_startupParams}
  docker-compose up -d --build --remove-orphans ${_startupParams}
  ;;
logs)
  configureEnvironment "$@"
  docker-compose logs -f
  ;;
stop)
  configureEnvironment
  docker-compose stop
  ;;
rm | down)
  configureEnvironment
  docker-compose \
  --log-level ERROR down \
  -v
  usage
  ;;
esac

popd >/dev/null
